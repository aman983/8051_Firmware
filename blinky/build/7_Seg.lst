                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module 7_Seg
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Tim_delay_ms
                                     12 	.globl _GPIO_PORT_Write
                                     13 	.globl _GPIO_Write
                                     14 	.globl _Multi_Segment_write_PARM_2
                                     15 	.globl _Segment_write_number_PARM_3
                                     16 	.globl _Segment_write_number_PARM_2
                                     17 	.globl _Segment_Init
                                     18 	.globl _Segment_write_number
                                     19 	.globl _Multi_Segment_write
                                     20 ;--------------------------------------------------------
                                     21 ; special function registers
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; special function bits
                                     27 ;--------------------------------------------------------
                                     28 	.area RSEG    (ABS,DATA)
      000000                         29 	.org 0x0000
                                     30 ;--------------------------------------------------------
                                     31 ; overlayable register banks
                                     32 ;--------------------------------------------------------
                                     33 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         34 	.ds 8
                                     35 ;--------------------------------------------------------
                                     36 ; internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area DSEG    (DATA)
      000000                         39 _Seg_port:
      000000                         40 	.ds 3
      000003                         41 _Seg_en_Port:
      000003                         42 	.ds 3
      000006                         43 _Segment_write_number_PARM_2:
      000006                         44 	.ds 1
      000007                         45 _Segment_write_number_PARM_3:
      000007                         46 	.ds 1
      000008                         47 _Segment_write_number_config_65536_12:
      000008                         48 	.ds 3
      00000B                         49 _Segment_write_number_i_131072_14:
      00000B                         50 	.ds 1
      00000C                         51 _Segment_write_number_i_131072_18:
      00000C                         52 	.ds 1
      00000D                         53 _Multi_Segment_write_PARM_2:
      00000D                         54 	.ds 2
                                     55 ;--------------------------------------------------------
                                     56 ; overlayable items in internal ram 
                                     57 ;--------------------------------------------------------
                                     58 	.area	OSEG    (OVR,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; indirectly addressable internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area ISEG    (DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; absolute internal ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area IABS    (ABS,DATA)
                                     67 	.area IABS    (ABS,DATA)
                                     68 ;--------------------------------------------------------
                                     69 ; bit data
                                     70 ;--------------------------------------------------------
                                     71 	.area BSEG    (BIT)
                                     72 ;--------------------------------------------------------
                                     73 ; paged external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area PSEG    (PAG,XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; external ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XSEG    (XDATA)
                                     80 ;--------------------------------------------------------
                                     81 ; absolute external ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area XABS    (ABS,XDATA)
                                     84 ;--------------------------------------------------------
                                     85 ; external initialized ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area XISEG   (XDATA)
                                     88 	.area HOME    (CODE)
                                     89 	.area GSINIT0 (CODE)
                                     90 	.area GSINIT1 (CODE)
                                     91 	.area GSINIT2 (CODE)
                                     92 	.area GSINIT3 (CODE)
                                     93 	.area GSINIT4 (CODE)
                                     94 	.area GSINIT5 (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 	.area GSFINAL (CODE)
                                     97 	.area CSEG    (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; global & static initialisations
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME    (CODE)
                                    102 	.area GSINIT  (CODE)
                                    103 	.area GSFINAL (CODE)
                                    104 	.area GSINIT  (CODE)
                                    105 ;--------------------------------------------------------
                                    106 ; Home
                                    107 ;--------------------------------------------------------
                                    108 	.area HOME    (CODE)
                                    109 	.area HOME    (CODE)
                                    110 ;--------------------------------------------------------
                                    111 ; code
                                    112 ;--------------------------------------------------------
                                    113 	.area CSEG    (CODE)
                                    114 ;------------------------------------------------------------
                                    115 ;Allocation info for local variables in function 'Segment_Init'
                                    116 ;------------------------------------------------------------
                                    117 ;config                    Allocated to registers r5 r6 r7 
                                    118 ;------------------------------------------------------------
                                    119 ;	../HAL/7_Seg.c:23: void Segment_Init(Seg_config_t *config){
                                    120 ;	-----------------------------------------
                                    121 ;	 function Segment_Init
                                    122 ;	-----------------------------------------
      000000                        123 _Segment_Init:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
                                    132 ;	../HAL/7_Seg.c:24: Seg_port.Port = config->Segment_Port;
      000000 AD 82            [24]  133 	mov	r5,dpl
      000002 AE 83            [24]  134 	mov	r6,dph
      000004 AF F0            [24]  135 	mov	r7,b
      000006 12r00r00         [24]  136 	lcall	__gptrget
      000009 FC               [12]  137 	mov	r4,a
      00000A 8C*00            [24]  138 	mov	_Seg_port,r4
                                    139 ;	../HAL/7_Seg.c:25: Seg_port.Mode = GPIO_OUTPUT;
      00000C 75*02 00         [24]  140 	mov	(_Seg_port + 0x0002),#0x00
                                    141 ;	../HAL/7_Seg.c:27: Seg_en_Port.Port = config->Seg_Enable_Port;
      00000F 0D               [12]  142 	inc	r5
      000010 BD 00 01         [24]  143 	cjne	r5,#0x00,00103$
      000013 0E               [12]  144 	inc	r6
      000014                        145 00103$:
      000014 8D 82            [24]  146 	mov	dpl,r5
      000016 8E 83            [24]  147 	mov	dph,r6
      000018 8F F0            [24]  148 	mov	b,r7
      00001A 12r00r00         [24]  149 	lcall	__gptrget
      00001D FD               [12]  150 	mov	r5,a
      00001E 8D*03            [24]  151 	mov	_Seg_en_Port,r5
                                    152 ;	../HAL/7_Seg.c:28: Seg_en_Port.Mode = GPIO_OUTPUT;
      000020 75*05 00         [24]  153 	mov	(_Seg_en_Port + 0x0002),#0x00
                                    154 ;	../HAL/7_Seg.c:29: }
      000023 22               [24]  155 	ret
                                    156 ;------------------------------------------------------------
                                    157 ;Allocation info for local variables in function 'Segment_write_number'
                                    158 ;------------------------------------------------------------
                                    159 ;display_number            Allocated with name '_Segment_write_number_PARM_2'
                                    160 ;number                    Allocated with name '_Segment_write_number_PARM_3'
                                    161 ;config                    Allocated with name '_Segment_write_number_config_65536_12'
                                    162 ;i                         Allocated with name '_Segment_write_number_i_131072_14'
                                    163 ;i                         Allocated with name '_Segment_write_number_i_131072_18'
                                    164 ;------------------------------------------------------------
                                    165 ;	../HAL/7_Seg.c:32: void Segment_write_number(Seg_config_t *config, unsigned char display_number, unsigned char number){
                                    166 ;	-----------------------------------------
                                    167 ;	 function Segment_write_number
                                    168 ;	-----------------------------------------
      000024                        169 _Segment_write_number:
      000024 85 82*08         [24]  170 	mov	_Segment_write_number_config_65536_12,dpl
      000027 85 83*09         [24]  171 	mov	(_Segment_write_number_config_65536_12 + 1),dph
      00002A 85 F0*0A         [24]  172 	mov	(_Segment_write_number_config_65536_12 + 2),b
                                    173 ;	../HAL/7_Seg.c:35: for(unsigned char i =0; i<4; i++){
      00002D 74 02            [12]  174 	mov	a,#0x02
      00002F 25*08            [12]  175 	add	a,_Segment_write_number_config_65536_12
      000031 FA               [12]  176 	mov	r2,a
      000032 E4               [12]  177 	clr	a
      000033 35*09            [12]  178 	addc	a,(_Segment_write_number_config_65536_12 + 1)
      000035 FB               [12]  179 	mov	r3,a
      000036 AC*0A            [24]  180 	mov	r4,(_Segment_write_number_config_65536_12 + 2)
      000038 75*0B 00         [24]  181 	mov	_Segment_write_number_i_131072_14,#0x00
      00003B                        182 00107$:
      00003B 74 FC            [12]  183 	mov	a,#0x100 - 0x04
      00003D 25*0B            [12]  184 	add	a,_Segment_write_number_i_131072_14
      00003F 40 31            [24]  185 	jc	00101$
                                    186 ;	../HAL/7_Seg.c:36: Seg_en_Port.Pin = config->Seg_Enable_Pins[i];
      000041 E5*0B            [12]  187 	mov	a,_Segment_write_number_i_131072_14
      000043 2A               [12]  188 	add	a,r2
      000044 FD               [12]  189 	mov	r5,a
      000045 E4               [12]  190 	clr	a
      000046 3B               [12]  191 	addc	a,r3
      000047 FE               [12]  192 	mov	r6,a
      000048 8C 07            [24]  193 	mov	ar7,r4
      00004A 8D 82            [24]  194 	mov	dpl,r5
      00004C 8E 83            [24]  195 	mov	dph,r6
      00004E 8F F0            [24]  196 	mov	b,r7
      000050 12r00r00         [24]  197 	lcall	__gptrget
      000053 FD               [12]  198 	mov	r5,a
      000054 8D*04            [24]  199 	mov	(_Seg_en_Port + 0x0001),r5
                                    200 ;	../HAL/7_Seg.c:37: GPIO_Write(&Seg_en_Port, GPIO_LOW);
      000056 75*00 00         [24]  201 	mov	_GPIO_Write_PARM_2,#0x00
      000059 90r00r03         [24]  202 	mov	dptr,#_Seg_en_Port
      00005C 75 F0 40         [24]  203 	mov	b,#0x40
      00005F C0 04            [24]  204 	push	ar4
      000061 C0 03            [24]  205 	push	ar3
      000063 C0 02            [24]  206 	push	ar2
      000065 12r00r00         [24]  207 	lcall	_GPIO_Write
      000068 D0 02            [24]  208 	pop	ar2
      00006A D0 03            [24]  209 	pop	ar3
      00006C D0 04            [24]  210 	pop	ar4
                                    211 ;	../HAL/7_Seg.c:35: for(unsigned char i =0; i<4; i++){
      00006E 05*0B            [12]  212 	inc	_Segment_write_number_i_131072_14
      000070 80 C9            [24]  213 	sjmp	00107$
      000072                        214 00101$:
                                    215 ;	../HAL/7_Seg.c:39: GPIO_PORT_Write(&Seg_port,  seg_digit_map[number % 10]);
      000072 AE*07            [24]  216 	mov	r6,_Segment_write_number_PARM_3
      000074 7F 00            [12]  217 	mov	r7,#0x00
      000076 75*00 0A         [24]  218 	mov	__modsint_PARM_2,#0x0a
                                    219 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000079 8F*01            [24]  220 	mov	(__modsint_PARM_2 + 1),r7
      00007B 8E 82            [24]  221 	mov	dpl,r6
      00007D 8F 83            [24]  222 	mov	dph,r7
      00007F 12r00r00         [24]  223 	lcall	__modsint
      000082 AE 82            [24]  224 	mov	r6,dpl
      000084 AF 83            [24]  225 	mov	r7,dph
      000086 EE               [12]  226 	mov	a,r6
      000087 24r00            [12]  227 	add	a,#_seg_digit_map
      000089 F5 82            [12]  228 	mov	dpl,a
      00008B EF               [12]  229 	mov	a,r7
      00008C 34s00            [12]  230 	addc	a,#(_seg_digit_map >> 8)
      00008E F5 83            [12]  231 	mov	dph,a
      000090 E4               [12]  232 	clr	a
      000091 93               [24]  233 	movc	a,@a+dptr
      000092 F5*00            [12]  234 	mov	_GPIO_PORT_Write_PARM_2,a
      000094 90r00r00         [24]  235 	mov	dptr,#_Seg_port
      000097 75 F0 40         [24]  236 	mov	b,#0x40
      00009A 12r00r00         [24]  237 	lcall	_GPIO_PORT_Write
                                    238 ;	../HAL/7_Seg.c:40: if(display_number < 4){
      00009D 74 FC            [12]  239 	mov	a,#0x100 - 0x04
      00009F 25*06            [12]  240 	add	a,_Segment_write_number_PARM_2
      0000A1 40 2C            [24]  241 	jc	00103$
                                    242 ;	../HAL/7_Seg.c:41: Seg_en_Port.Pin = config->Seg_Enable_Pins[display_number];
      0000A3 74 02            [12]  243 	mov	a,#0x02
      0000A5 25*08            [12]  244 	add	a,_Segment_write_number_config_65536_12
      0000A7 FD               [12]  245 	mov	r5,a
      0000A8 E4               [12]  246 	clr	a
      0000A9 35*09            [12]  247 	addc	a,(_Segment_write_number_config_65536_12 + 1)
      0000AB FE               [12]  248 	mov	r6,a
      0000AC AF*0A            [24]  249 	mov	r7,(_Segment_write_number_config_65536_12 + 2)
      0000AE E5*06            [12]  250 	mov	a,_Segment_write_number_PARM_2
      0000B0 2D               [12]  251 	add	a,r5
      0000B1 FD               [12]  252 	mov	r5,a
      0000B2 E4               [12]  253 	clr	a
      0000B3 3E               [12]  254 	addc	a,r6
      0000B4 FE               [12]  255 	mov	r6,a
      0000B5 8D 82            [24]  256 	mov	dpl,r5
      0000B7 8E 83            [24]  257 	mov	dph,r6
      0000B9 8F F0            [24]  258 	mov	b,r7
      0000BB 12r00r00         [24]  259 	lcall	__gptrget
      0000BE FD               [12]  260 	mov	r5,a
      0000BF 8D*04            [24]  261 	mov	(_Seg_en_Port + 0x0001),r5
                                    262 ;	../HAL/7_Seg.c:42: GPIO_Write(&Seg_en_Port, GPIO_HIGH);
      0000C1 75*00 01         [24]  263 	mov	_GPIO_Write_PARM_2,#0x01
      0000C4 90r00r03         [24]  264 	mov	dptr,#_Seg_en_Port
      0000C7 75 F0 40         [24]  265 	mov	b,#0x40
      0000CA 12r00r00         [24]  266 	lcall	_GPIO_Write
      0000CD 80 01            [24]  267 	sjmp	00104$
      0000CF                        268 00103$:
                                    269 ;	../HAL/7_Seg.c:44: return;
      0000CF 22               [24]  270 	ret
      0000D0                        271 00104$:
                                    272 ;	../HAL/7_Seg.c:46: Tim_delay_ms(1);
      0000D0 90 00 01         [24]  273 	mov	dptr,#0x0001
      0000D3 12r00r00         [24]  274 	lcall	_Tim_delay_ms
                                    275 ;	../HAL/7_Seg.c:48: for(unsigned char i =0; i<4; i++){
      0000D6 74 02            [12]  276 	mov	a,#0x02
      0000D8 25*08            [12]  277 	add	a,_Segment_write_number_config_65536_12
      0000DA FD               [12]  278 	mov	r5,a
      0000DB E4               [12]  279 	clr	a
      0000DC 35*09            [12]  280 	addc	a,(_Segment_write_number_config_65536_12 + 1)
      0000DE FE               [12]  281 	mov	r6,a
      0000DF AF*0A            [24]  282 	mov	r7,(_Segment_write_number_config_65536_12 + 2)
      0000E1 75*0C 00         [24]  283 	mov	_Segment_write_number_i_131072_18,#0x00
      0000E4                        284 00110$:
      0000E4 74 FC            [12]  285 	mov	a,#0x100 - 0x04
      0000E6 25*0C            [12]  286 	add	a,_Segment_write_number_i_131072_18
      0000E8 40 31            [24]  287 	jc	00112$
                                    288 ;	../HAL/7_Seg.c:49: Seg_en_Port.Pin = config->Seg_Enable_Pins[i];
      0000EA E5*0C            [12]  289 	mov	a,_Segment_write_number_i_131072_18
      0000EC 2D               [12]  290 	add	a,r5
      0000ED FA               [12]  291 	mov	r2,a
      0000EE E4               [12]  292 	clr	a
      0000EF 3E               [12]  293 	addc	a,r6
      0000F0 FB               [12]  294 	mov	r3,a
      0000F1 8F 04            [24]  295 	mov	ar4,r7
      0000F3 8A 82            [24]  296 	mov	dpl,r2
      0000F5 8B 83            [24]  297 	mov	dph,r3
      0000F7 8C F0            [24]  298 	mov	b,r4
      0000F9 12r00r00         [24]  299 	lcall	__gptrget
      0000FC FA               [12]  300 	mov	r2,a
      0000FD 8A*04            [24]  301 	mov	(_Seg_en_Port + 0x0001),r2
                                    302 ;	../HAL/7_Seg.c:50: GPIO_Write(&Seg_en_Port, GPIO_LOW);
      0000FF 75*00 00         [24]  303 	mov	_GPIO_Write_PARM_2,#0x00
      000102 90r00r03         [24]  304 	mov	dptr,#_Seg_en_Port
      000105 75 F0 40         [24]  305 	mov	b,#0x40
      000108 C0 07            [24]  306 	push	ar7
      00010A C0 06            [24]  307 	push	ar6
      00010C C0 05            [24]  308 	push	ar5
      00010E 12r00r00         [24]  309 	lcall	_GPIO_Write
      000111 D0 05            [24]  310 	pop	ar5
      000113 D0 06            [24]  311 	pop	ar6
      000115 D0 07            [24]  312 	pop	ar7
                                    313 ;	../HAL/7_Seg.c:48: for(unsigned char i =0; i<4; i++){
      000117 05*0C            [12]  314 	inc	_Segment_write_number_i_131072_18
      000119 80 C9            [24]  315 	sjmp	00110$
      00011B                        316 00112$:
                                    317 ;	../HAL/7_Seg.c:53: }
      00011B 22               [24]  318 	ret
                                    319 ;------------------------------------------------------------
                                    320 ;Allocation info for local variables in function 'Multi_Segment_write'
                                    321 ;------------------------------------------------------------
                                    322 ;number                    Allocated with name '_Multi_Segment_write_PARM_2'
                                    323 ;config                    Allocated to registers r5 r6 r7 
                                    324 ;is_negative               Allocated to registers 
                                    325 ;n                         Allocated to registers r3 r4 
                                    326 ;dig                       Allocated to registers 
                                    327 ;seg_no                    Allocated to registers r2 
                                    328 ;------------------------------------------------------------
                                    329 ;	../HAL/7_Seg.c:56: void Multi_Segment_write(Seg_config_t *config, int number){
                                    330 ;	-----------------------------------------
                                    331 ;	 function Multi_Segment_write
                                    332 ;	-----------------------------------------
      00011C                        333 _Multi_Segment_write:
      00011C AD 82            [24]  334 	mov	r5,dpl
      00011E AE 83            [24]  335 	mov	r6,dph
      000120 AF F0            [24]  336 	mov	r7,b
                                    337 ;	../HAL/7_Seg.c:58: int n = number;
      000122 AB*0D            [24]  338 	mov	r3,_Multi_Segment_write_PARM_2
      000124 AC*0E            [24]  339 	mov	r4,(_Multi_Segment_write_PARM_2 + 1)
                                    340 ;	../HAL/7_Seg.c:61: if(number > 9999){
      000126 C3               [12]  341 	clr	c
      000127 74 0F            [12]  342 	mov	a,#0x0f
      000129 9B               [12]  343 	subb	a,r3
      00012A 74 A7            [12]  344 	mov	a,#(0x27 ^ 0x80)
      00012C 8C F0            [24]  345 	mov	b,r4
      00012E 63 F0 80         [24]  346 	xrl	b,#0x80
      000131 95 F0            [12]  347 	subb	a,b
      000133 50 06            [24]  348 	jnc	00104$
                                    349 ;	../HAL/7_Seg.c:62: n = 9999;
      000135 7B 0F            [12]  350 	mov	r3,#0x0f
      000137 7C 27            [12]  351 	mov	r4,#0x27
      000139 80 08            [24]  352 	sjmp	00114$
      00013B                        353 00104$:
                                    354 ;	../HAL/7_Seg.c:63: }else if(number < 0){  // refine the negative number logic
      00013B EC               [12]  355 	mov	a,r4
      00013C 30 E7 04         [24]  356 	jnb	acc.7,00114$
                                    357 ;	../HAL/7_Seg.c:65: n = 999;
      00013F 7B E7            [12]  358 	mov	r3,#0xe7
      000141 7C 03            [12]  359 	mov	r4,#0x03
                                    360 ;	../HAL/7_Seg.c:68: while (n)
      000143                        361 00114$:
      000143 7A 00            [12]  362 	mov	r2,#0x00
      000145                        363 00106$:
      000145 EB               [12]  364 	mov	a,r3
      000146 4C               [12]  365 	orl	a,r4
      000147 60 64            [24]  366 	jz	00109$
                                    367 ;	../HAL/7_Seg.c:72: dig = n % 10;
      000149 75*00 0A         [24]  368 	mov	__modsint_PARM_2,#0x0a
      00014C 75*01 00         [24]  369 	mov	(__modsint_PARM_2 + 1),#0x00
      00014F 8B 82            [24]  370 	mov	dpl,r3
      000151 8C 83            [24]  371 	mov	dph,r4
      000153 C0 07            [24]  372 	push	ar7
      000155 C0 06            [24]  373 	push	ar6
      000157 C0 05            [24]  374 	push	ar5
      000159 C0 04            [24]  375 	push	ar4
      00015B C0 03            [24]  376 	push	ar3
      00015D C0 02            [24]  377 	push	ar2
      00015F 12r00r00         [24]  378 	lcall	__modsint
      000162 A8 82            [24]  379 	mov	r0,dpl
      000164 D0 02            [24]  380 	pop	ar2
      000166 D0 03            [24]  381 	pop	ar3
      000168 D0 04            [24]  382 	pop	ar4
      00016A D0 05            [24]  383 	pop	ar5
      00016C D0 06            [24]  384 	pop	ar6
      00016E D0 07            [24]  385 	pop	ar7
      000170 88*07            [24]  386 	mov	_Segment_write_number_PARM_3,r0
                                    387 ;	../HAL/7_Seg.c:74: Segment_write_number(config, seg_no, dig);
      000172 8A*06            [24]  388 	mov	_Segment_write_number_PARM_2,r2
      000174 8D 82            [24]  389 	mov	dpl,r5
      000176 8E 83            [24]  390 	mov	dph,r6
      000178 8F F0            [24]  391 	mov	b,r7
      00017A C0 07            [24]  392 	push	ar7
      00017C C0 06            [24]  393 	push	ar6
      00017E C0 05            [24]  394 	push	ar5
      000180 C0 04            [24]  395 	push	ar4
      000182 C0 03            [24]  396 	push	ar3
      000184 C0 02            [24]  397 	push	ar2
      000186 12r00r24         [24]  398 	lcall	_Segment_write_number
      000189 D0 02            [24]  399 	pop	ar2
      00018B D0 03            [24]  400 	pop	ar3
      00018D D0 04            [24]  401 	pop	ar4
                                    402 ;	../HAL/7_Seg.c:75: n = n/10;
      00018F 75*00 0A         [24]  403 	mov	__divsint_PARM_2,#0x0a
      000192 75*01 00         [24]  404 	mov	(__divsint_PARM_2 + 1),#0x00
      000195 8B 82            [24]  405 	mov	dpl,r3
      000197 8C 83            [24]  406 	mov	dph,r4
      000199 C0 02            [24]  407 	push	ar2
      00019B 12r00r00         [24]  408 	lcall	__divsint
      00019E AB 82            [24]  409 	mov	r3,dpl
      0001A0 AC 83            [24]  410 	mov	r4,dph
      0001A2 D0 02            [24]  411 	pop	ar2
      0001A4 D0 05            [24]  412 	pop	ar5
      0001A6 D0 06            [24]  413 	pop	ar6
      0001A8 D0 07            [24]  414 	pop	ar7
                                    415 ;	../HAL/7_Seg.c:76: seg_no++;
      0001AA 0A               [12]  416 	inc	r2
      0001AB 80 98            [24]  417 	sjmp	00106$
      0001AD                        418 00109$:
                                    419 ;	../HAL/7_Seg.c:79: }
      0001AD 22               [24]  420 	ret
                                    421 	.area CSEG    (CODE)
                                    422 	.area CONST   (CODE)
      000000                        423 _seg_digit_map:
      000000 3F                     424 	.db #0x3f	; 63
      000001 06                     425 	.db #0x06	; 6
      000002 5B                     426 	.db #0x5b	; 91
      000003 4F                     427 	.db #0x4f	; 79	'O'
      000004 66                     428 	.db #0x66	; 102	'f'
      000005 6D                     429 	.db #0x6d	; 109	'm'
      000006 7D                     430 	.db #0x7d	; 125
      000007 07                     431 	.db #0x07	; 7
      000008 7F                     432 	.db #0x7f	; 127
      000009 6F                     433 	.db #0x6f	; 111	'o'
                                    434 	.area XINIT   (CODE)
                                    435 	.area CABS    (ABS,CODE)
